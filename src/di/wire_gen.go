// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"github.com/RomeroGabriel/dependency-inversion/product"
	"github.com/RomeroGabriel/dependency-inversion/user"
	"github.com/google/wire"
)

import (
	_ "github.com/mattn/go-sqlite3"
)

// Injectors from wire.go:

func NewProductUseCase(db *sql.DB) *product.ProductUseCase {
	productRepository := product.NewProductRepository(db)
	productUseCase := product.NewProductUseCase(productRepository)
	return productUseCase
}

func NewUserUseCase(db *sql.DB) *user.UserUseCase {
	userRepository := user.NewUserRepository(db)
	userUseCase := user.NewUserUseCase(userRepository)
	return userUseCase
}

// wire.go:

// Provider: a function that can produce a value.
// Sets are useful if several providers will frequently be used together.
var setRepositoryDependency = wire.NewSet(product.NewProductRepository, wire.Bind(new(product.ProductRepositoryInterface), new(*product.ProductRepository)), user.NewUserRepository, wire.Bind(new(user.UserRepositoryInterface), new(*user.UserRepository)))
